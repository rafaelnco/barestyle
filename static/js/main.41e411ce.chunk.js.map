{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["values","defaults","rules","unit","variations","generator","nominators","paramCase","camelCase","types","console","log","Section","TagType","hoverIn","hoverOut","pressIn","pressOut","style","props","useState","pressed","setPressed","onMouseEnter","onMouseDown","onMouseUp","onMouseLeave","Object","assign","display","applyAll","Square","size","width","height","Text","Button","state","setState","hovered","animating","lightest-filled-shadow","lightest-link-shadow","lightest-round","lightest-margin","transform","filter","valid","join","constraints","dimension","pallete","background","samples","generate","Boolean","window","location","hostname","match","ReactDOM","render","vertical","justify-start","src","logo","primary-foreground","heavy-text","wrap","horizontal","justify-center","vertical-flow","keys","map","index","slice","length","sample","lightest-link-border-bottom","lightest-alert-border-left","key","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.41e411ce.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nimport logo from './logo.svg'\n\nimport './App.css';\n\nimport {\n  defaults,\n  generator,\n  generate,\n  applyAll,\n} from 'barestyle'\n\nimport { valid, \n  paramCase,\n  camelCase} from 'barestyle/utils'\n\nconst { values, rules } = defaults\n\nconst unit = unit => `${2 * unit}rem`\n\nconst variations = generator({\n  nominators: [paramCase, camelCase],\n  types: {\n    //spacing: spacing => ({ spacing: 5 * spacing }),\n    unit,\n  },\n  /* transformers: props => [\n    ...defaults.transformers(props),\n  ] */\n})\n\nconsole.log(variations)\n\nconst Section = ({ TagType='div', hoverIn, hoverOut, pressIn, pressOut, style, ...props }) => {\n  const [pressed, setPressed] = useState(false)\n  return <TagType\n    onMouseEnter={() => {\n      if(hoverIn) hoverIn()\n    }}\n    onMouseDown={() => {\n      if(pressIn) pressIn()\n      setPressed(true)\n    }}\n    onMouseUp={() => {\n      if(pressed && pressOut) pressOut()\n      setPressed(false)\n    }}\n    onMouseLeave={() => {\n      if(pressed) {\n        //if(pressOut) pressOut()\n        setPressed(false)\n      }\n      if(hoverOut) hoverOut()\n    }}\n    style={Object.assign(\n      { display: 'flex' },\n      applyAll(variations, props),\n      style\n    )}\n    {...props}\n  />\n}\n\nconst Square = ({ size = 10, style, ...props }) =>\n  <Section\n    style={{ width: unit(size), height: unit(size), ...style }}\n    {...props}\n  />\n\nconst Text = props => <Section TagType=\"p\" {...props} />\n\nconst Button = ({...props}) => {\n  const [state, setState] = useState({})\n  const {pressed, hovered, animating} = state;\n  return <Square\n    size={3}\n    lightest-filled-shadow={!pressed}\n    lightest-link-shadow={pressed}\n    lightest-round\n    lightest-margin\n    {...props}\n    pressIn={() => setState({ animating, pressed: true })}\n    pressOut={() => setState({ animating: !animating, hovered })}\n    hoverIn={() => setState({ animating: !animating, hovered: true })}\n    hoverOut={() => setState({ animating: !animating })}\n    style={{\n      transform: [\n        `scale(${ pressed ? 0.9 : hovered ? 1.1 : 1 })`,\n        animating && `rotate3d(1,1,0,30deg)`\n      ].filter(valid).join(' ')\n    }}\n  />\n}\n\nconst constraints = [ values.dimension, values.pallete, rules.background ]\nconst samples = generate({constraints})\nexport default () => {\n  return <Section vertical>\n    <Section lightest-filled-shadow justify-start>\n      <Section style={{width: unit(5)}}>\n        <img src={logo} style={{ height: '100%' }}/>\n      </Section>\n      <Section>\n        <Text primary-foreground heavy-text>Bare Style</Text>\n      </Section>\n    </Section>\n    <Section wrap horizontal justify-center vertical-flow>\n      {\n        Object.keys(values.pallete).map((pallete, index) => (\n          <Section>\n            {\n              Object.keys(samples).slice(\n                Object.keys(values.pallete).length*index,\n                (index+1)*Object.keys(values.pallete).length\n              ).map(sample => <Button lightest-link-border-bottom lightest-alert-border-left key={sample} {...{[sample]: true}} />)\n            }\n          </Section>\n        ))\n      }\n    </Section>\n  </Section>\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.881e786c.svg\";"],"sourceRoot":""}